[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "01d665069f35cc1f",
        "type": "tab",
        "label": "register",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "68c229e597641891",
        "type": "tab",
        "label": "MSB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "06072a21a812d30b",
        "type": "tab",
        "label": "Log",
        "disabled": false,
        "info": ""
    },
    {
        "id": "33eb1833b0dac91f",
        "type": "tab",
        "label": "token",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6b7a48cdf37ecce9",
        "type": "tab",
        "label": "Example mongodb4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d5a072f2bbd52ce4",
        "type": "subflow",
        "name": "Mongo",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 160,
                "wires": [
                    {
                        "id": "42ef31bb646287be"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 160,
                "wires": [
                    {
                        "id": "42ef31bb646287be",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e2bc7ac9aa77279e",
        "type": "mongodb4-client",
        "name": "exampledb connection",
        "protocol": "mongodb",
        "hostname": "mongodb",
        "port": "27017",
        "dbName": "msbdemo",
        "appName": "",
        "authSource": "nodered",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "",
        "socketTimeoutMS": "",
        "minPoolSize": "",
        "maxPoolSize": "",
        "maxIdleTimeMS": "",
        "uri": "mongodb://mongodb:27017",
        "advanced": "{\"connectTimeoutMS\": 30000, \"retrywrites\": false}",
        "uriTabActive": "tab-uri-advanced"
    },
    {
        "id": "dd0b7f14421d961d",
        "type": "mongodb4-client",
        "name": "advanced connection",
        "protocol": "mongodb",
        "hostname": "mongodb",
        "port": "27017",
        "dbName": "msbdemo",
        "appName": "",
        "authSource": "nodered",
        "authMechanism": "DEFAULT",
        "tls": true,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "",
        "socketTimeoutMS": "",
        "minPoolSize": "",
        "maxPoolSize": "",
        "maxIdleTimeMS": "",
        "uri": "mongodb://localhost:27017",
        "advanced": "{\"retrywrites\": false}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "26d5996f5616ba94",
        "type": "mongodb4-client",
        "name": "cosmos-demo",
        "protocol": "mongodb",
        "hostname": "mongodb",
        "port": "27017",
        "dbName": "msbdemo",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": true,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "",
        "advanced": "{\"retrywrites\": false}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "b3a3e4ea.e9e948",
        "type": "websocket-listener",
        "path": "/ws/update",
        "wholemsg": "false"
    },
    {
        "id": "0243e6b7fe23352f",
        "type": "mongodb4-client",
        "name": "cosmos-msbdemo",
        "protocol": "mongodb",
        "hostname": "mongodb",
        "port": "27017",
        "dbName": "msbdemo",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "mongodb://mongodb:27017",
        "advanced": "{\"retrywrites\": false}",
        "uriTabActive": "tab-uri-advanced"
    },
    {
        "id": "8b888737a4af244e",
        "type": "mongodb",
        "hostname": "mongodb",
        "port": "27017",
        "db": "test",
        "name": ""
    },
    {
        "id": "c2afedee741c95f4",
        "type": "websocket-listener",
        "path": "/ws/signage",
        "wholemsg": "false"
    },
    {
        "id": "b2d41a876c2108ca",
        "type": "mqtt-broker",
        "name": "reader",
        "broker": "msbdemo.pinatek.xyz",
        "port": "1883",
        "clientid": "nodered-mqtt",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b6e20eadbe030e6d",
        "type": "JsonWebToken_config",
        "name": "myJWTtoken",
        "secret": "82kwUMWGeHy3J7x4nGhc_l59n5wRGyuCSfaBAN3lhLzU7FhKDrs81IYuhrvxEZZh4hfQc2QB7pBSNVb6g6hAouJo5N6IVMPgpvwxIlD4ysXX65MEUASEEfgxSBnrYMLr19xQBzXa35Wt4GQZLIL9c7zoIfHAVLzKiQ8Rtanvh1temlUQ2fCaQugq5otlOhlQchEAHm6X3vQpXjvtzddDlkiQ6LGaRBimzOUrDXo7Odfcu-KWLQee8voOFEWfV_VKL04nkoxO0Apv8I98JJy9qJLKjqfmsgV1j0rih7xTA-EPVbnZf7nuUpcU9ep39pPkgdFANlkLdlnzqby4xDCO9w"
    },
    {
        "id": "f1eb3879a0e7a8d5",
        "type": "global-config",
        "name": "global-config",
        "env": [
            {
                "name": "COSMOSDB_USER",
                "value": "msbiotics-demo-cosmosdb",
                "type": "str"
            },
            {
                "name": "COSMOSDB_PASS",
                "value": "D5CrLrlISUOFQpFhlqZOvhQER9J0SM83mOKYZSnYZV9A0ZLY5QzLmoq6xQIZGFwchrHs2ioRpualACDbezIVVg==",
                "type": "str"
            }
        ]
    },
    {
        "id": "42ef31bb646287be",
        "type": "mongodb4",
        "z": "d5a072f2bbd52ce4",
        "clientNode": "0243e6b7fe23352f",
        "mode": "collection",
        "collection": "registry",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "find registry",
        "x": 330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "611db9aeea31057e",
        "type": "http in",
        "z": "01d665069f35cc1f",
        "name": "",
        "url": "/getIp",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 280,
        "wires": [
            [
                "4716aa664b6d2a4b"
            ]
        ]
    },
    {
        "id": "4716aa664b6d2a4b",
        "type": "function",
        "z": "01d665069f35cc1f",
        "name": "getIp",
        "func": "var id = msg.payload.id;\nnode.warn(id);\nnode.warn(context.global.ips[id]);\nif(id && context.global.ips)\n    msg.payload = context.global.ips[id];\n else   \n    msg.payload =  \"0.0.0.0\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "9c79f73c3e3f959d",
                "5cb947b069fd57b1"
            ]
        ]
    },
    {
        "id": "9c79f73c3e3f959d",
        "type": "http response",
        "z": "01d665069f35cc1f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 280,
        "wires": []
    },
    {
        "id": "119d1e61c07b0aa2",
        "type": "http in",
        "z": "01d665069f35cc1f",
        "name": "",
        "url": "/addIp",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "c45ff979bc1a9392"
            ]
        ]
    },
    {
        "id": "c45ff979bc1a9392",
        "type": "function",
        "z": "01d665069f35cc1f",
        "name": "addIp",
        "func": "if(context.global.ips === undefined)\n    context.global.ips = {};\n\nvar id = msg.payload.id;\nvar ip = msg.payload.ip;\n\n\n\nif(id && ip)\n    context.global.ips[id] = ip;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [
            [
                "da6ce42f557eae14",
                "db82d2fd1f55b912"
            ]
        ]
    },
    {
        "id": "da6ce42f557eae14",
        "type": "http response",
        "z": "01d665069f35cc1f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 550,
        "y": 200,
        "wires": []
    },
    {
        "id": "95bbab2064b2c0d4",
        "type": "inject",
        "z": "01d665069f35cc1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 230,
        "y": 120,
        "wires": [
            [
                "bf50a7ee0225292b"
            ]
        ]
    },
    {
        "id": "5e0ec9a3f371e285",
        "type": "http request",
        "z": "01d665069f35cc1f",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.ipify.org?format=json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 570,
        "y": 120,
        "wires": [
            [
                "49623415bd2a5c9e"
            ]
        ]
    },
    {
        "id": "80037105564cd834",
        "type": "debug",
        "z": "01d665069f35cc1f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 120,
        "wires": []
    },
    {
        "id": "db82d2fd1f55b912",
        "type": "debug",
        "z": "01d665069f35cc1f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 240,
        "wires": []
    },
    {
        "id": "67cb012b177b5ba4",
        "type": "inject",
        "z": "01d665069f35cc1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "506d2938f9f3f6d0"
            ]
        ]
    },
    {
        "id": "506d2938f9f3f6d0",
        "type": "function",
        "z": "01d665069f35cc1f",
        "name": "List ips",
        "func": "msg.payload = context.global.ips;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 400,
        "wires": [
            [
                "b6c69e24f78e69c2"
            ]
        ]
    },
    {
        "id": "b6c69e24f78e69c2",
        "type": "debug",
        "z": "01d665069f35cc1f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 400,
        "wires": []
    },
    {
        "id": "5cb947b069fd57b1",
        "type": "debug",
        "z": "01d665069f35cc1f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 340,
        "wires": []
    },
    {
        "id": "4dbebdee3885479a",
        "type": "inject",
        "z": "01d665069f35cc1f",
        "name": "clear",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "3c19324d91e19df0"
            ]
        ]
    },
    {
        "id": "3c19324d91e19df0",
        "type": "function",
        "z": "01d665069f35cc1f",
        "name": "clear ips",
        "func": "context.global.ips = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 480,
        "wires": [
            [
                "6dde988a0151417f"
            ]
        ]
    },
    {
        "id": "6dde988a0151417f",
        "type": "debug",
        "z": "01d665069f35cc1f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 480,
        "wires": []
    },
    {
        "id": "49623415bd2a5c9e",
        "type": "function",
        "z": "01d665069f35cc1f",
        "name": "save ip",
        "func": "\nvar json = JSON.parse(msg.payload);\nvar ip = json.ip;\n\ncontext.global.ips['OR_101'] = ip;\ncontext.global.ips['OR_102'] = ip;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 120,
        "wires": [
            [
                "80037105564cd834"
            ]
        ]
    },
    {
        "id": "bf50a7ee0225292b",
        "type": "function",
        "z": "01d665069f35cc1f",
        "name": "init",
        "func": "\ncontext.global.ips = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "5e0ec9a3f371e285"
            ]
        ]
    },
    {
        "id": "c3fdc5ac99e40efb",
        "type": "http in",
        "z": "01d665069f35cc1f",
        "name": "",
        "url": "/page",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "e17fcf2e4b3b593d"
            ]
        ]
    },
    {
        "id": "d9e7520928ee5809",
        "type": "http response",
        "z": "01d665069f35cc1f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 660,
        "wires": []
    },
    {
        "id": "e17fcf2e4b3b593d",
        "type": "function",
        "z": "01d665069f35cc1f",
        "name": "",
        "func": "let id = msg.payload.id;\n\nif(context.global.screens)\n{\n    if(context.global.screens[id])\n    {\n        msg.payload = context.global.screens[id];\n    }\n    else{\n        msg.payload = {\"0\": { url: \"https://msb.eastus.cloudapp.azure.com:1880\", state: \"normal\", tab:0 }};\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 660,
        "wires": [
            [
                "d9e7520928ee5809",
                "77eb17f0356db83c"
            ]
        ]
    },
    {
        "id": "77eb17f0356db83c",
        "type": "debug",
        "z": "01d665069f35cc1f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 740,
        "wires": []
    },
    {
        "id": "e54ab873f83fc8fd",
        "type": "http in",
        "z": "01d665069f35cc1f",
        "name": "",
        "url": "/setPage",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 820,
        "wires": [
            [
                "e666e4cb2df7a004"
            ]
        ]
    },
    {
        "id": "c79699624e6d722b",
        "type": "http response",
        "z": "01d665069f35cc1f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 520,
        "y": 820,
        "wires": []
    },
    {
        "id": "e666e4cb2df7a004",
        "type": "function",
        "z": "01d665069f35cc1f",
        "name": "",
        "func": "let id = msg.payload.id;\nlet url = msg.payload.url;\nlet state = msg.payload.state || \"normal\";\nlet tab = msg.payload.tab || 0;\n\nif(context.global.screens === undefined)\n    context.global.screens = {};\n\nif(id && url) \n{\n    var tabs = context.global.screens[id];\n    if(tabs === undefined)\n    {\n        tabs = {};\n        context.global.screens[id] = tabs;\n    }\n    tabs[tab] = { url: url, state: state, tab: tab };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 820,
        "wires": [
            [
                "c79699624e6d722b",
                "2fa559419bb7c547",
                "6ba86c6ae5d4a806"
            ]
        ]
    },
    {
        "id": "2fa559419bb7c547",
        "type": "debug",
        "z": "01d665069f35cc1f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 880,
        "wires": []
    },
    {
        "id": "56aec20f089c5e21",
        "type": "inject",
        "z": "01d665069f35cc1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 960,
        "wires": [
            [
                "1d1dd8ee5662dc81"
            ]
        ]
    },
    {
        "id": "1d1dd8ee5662dc81",
        "type": "function",
        "z": "01d665069f35cc1f",
        "name": "",
        "func": "context.global.screens = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "c5733bad52c16990",
        "type": "websocket in",
        "z": "01d665069f35cc1f",
        "name": "",
        "server": "c2afedee741c95f4",
        "client": "",
        "x": 220,
        "y": 1080,
        "wires": [
            [
                "a2e935afe31176fd"
            ]
        ]
    },
    {
        "id": "6ba86c6ae5d4a806",
        "type": "websocket out",
        "z": "01d665069f35cc1f",
        "name": "",
        "server": "c2afedee741c95f4",
        "client": "",
        "x": 610,
        "y": 980,
        "wires": []
    },
    {
        "id": "a2e935afe31176fd",
        "type": "debug",
        "z": "01d665069f35cc1f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 1140,
        "wires": []
    },
    {
        "id": "da119665cc50053d",
        "type": "inject",
        "z": "01d665069f35cc1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1220,
        "wires": [
            [
                "1a7db68e9cbaab6e"
            ]
        ]
    },
    {
        "id": "1a7db68e9cbaab6e",
        "type": "function",
        "z": "01d665069f35cc1f",
        "name": "",
        "func": "\nmsg.payload = context.global.screens;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1220,
        "wires": [
            [
                "489e420a78563dbf"
            ]
        ]
    },
    {
        "id": "489e420a78563dbf",
        "type": "debug",
        "z": "01d665069f35cc1f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1220,
        "wires": []
    },
    {
        "id": "7a6e191517d5d0fe",
        "type": "inject",
        "z": "68c229e597641891",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 240,
        "y": 160,
        "wires": [
            [
                "a63dcc1c9a6de8da"
            ]
        ]
    },
    {
        "id": "a63dcc1c9a6de8da",
        "type": "function",
        "z": "68c229e597641891",
        "name": "find",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "aa1c98ab36cb6108"
            ]
        ]
    },
    {
        "id": "6f9f0ca5c3cb094f",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "Test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 160,
        "wires": []
    },
    {
        "id": "6f5d702ba75611e8",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/test",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "563393923a7bc24b"
            ]
        ]
    },
    {
        "id": "51c69469c3bb72c1",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 300,
        "wires": []
    },
    {
        "id": "563393923a7bc24b",
        "type": "function",
        "z": "68c229e597641891",
        "name": "get",
        "func": "\nmsg.payload = JSON.parse(msg.payload.q);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            [
                "b06d185f2a59735d"
            ]
        ]
    },
    {
        "id": "cd3e0eadadc0e196",
        "type": "function",
        "z": "68c229e597641891",
        "name": "get",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 320,
        "wires": [
            [
                "51c69469c3bb72c1"
            ]
        ]
    },
    {
        "id": "226adccb.a0c244",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/start",
        "method": "post",
        "swaggerDoc": "",
        "x": 250,
        "y": 1660,
        "wires": [
            [
                "fb59ba30.0b7628",
                "57d9db1e.7dc8a4"
            ]
        ]
    },
    {
        "id": "fb59ba30.0b7628",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "x": 454.71875,
        "y": 1727,
        "wires": []
    },
    {
        "id": "57d9db1e.7dc8a4",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Start",
        "func": "\nvar room = msg.payload.id;\nvar state = msg.payload.state;\n\n\n\nif(state == \"start\")\n{\n    current = {room:room,tags:{},startTime:new Date().getTime()};\n    current.elapsed = 0;\n    current.surgeon = msg.payload.surgeon;\n    current.operation = msg.payload.operation;\n    \n    context.global.currentOperations[room] = current;\n}\nelse if(state == \"watch\")\n{\n    current = context.global.currentOperations[room];\n}\nelse if(state == \"cancel\")\n{\n    current = context.global.currentOperations[room];\n    delete context.global.currentOperations[room];\n}\nif(current === undefined)\n    current = {room:room,tags:{}};\n    \ncurrent.msgtype = state;\nmsg.payload = [current];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1660,
        "wires": [
            [
                "fdf164a2.e4b648"
            ]
        ]
    },
    {
        "id": "fdf164a2.e4b648",
        "type": "websocket out",
        "z": "68c229e597641891",
        "name": "",
        "server": "b3a3e4ea.e9e948",
        "client": "",
        "x": 680,
        "y": 1660,
        "wires": []
    },
    {
        "id": "384c33ac.9601bc",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/stop",
        "method": "post",
        "swaggerDoc": "",
        "x": 260.765625,
        "y": 1862,
        "wires": [
            [
                "f4dc7c7d.95561",
                "c74f0531.249188",
                "b21c35129b3380b0"
            ]
        ]
    },
    {
        "id": "f4dc7c7d.95561",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "x": 436.765625,
        "y": 1924,
        "wires": []
    },
    {
        "id": "6cc07141.33f15",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Update GUI",
        "func": "\nvar room = msg.payload.id;\nvar current = context.global.currentOperations[room];\nif(current)\n    delete context.global.currentOperations[room];\nelse\n    current = { room:room,tags:{}};\n\ncurrent.msgtype = \"stopped\";\nmsg.payload = [current];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1860,
        "wires": [
            [
                "c80444a0.6806c8"
            ]
        ]
    },
    {
        "id": "c80444a0.6806c8",
        "type": "websocket out",
        "z": "68c229e597641891",
        "name": "",
        "server": "b3a3e4ea.e9e948",
        "client": "",
        "x": 1040,
        "y": 1860,
        "wires": []
    },
    {
        "id": "c74f0531.249188",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "Edit",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 451.765625,
        "y": 1816,
        "wires": []
    },
    {
        "id": "3512a874.11c318",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "Device",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 770,
        "y": 1940,
        "wires": []
    },
    {
        "id": "707681fe.6b866",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/current",
        "method": "get",
        "swaggerDoc": "",
        "x": 256.875,
        "y": 2070,
        "wires": [
            [
                "443206f5.c73c68"
            ]
        ]
    },
    {
        "id": "443206f5.c73c68",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Get current values",
        "func": "var id = msg.payload.id;\nvar current = context.global.currentOperations[id];\nif(current === undefined)\n{\n    msg.payload = [];\n}\nelse\n    msg.payload = [current];\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 461.875,
        "y": 2070,
        "wires": [
            [
                "12e75a4e.34a786",
                "f7945942.8ac8c8"
            ]
        ]
    },
    {
        "id": "12e75a4e.34a786",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "x": 674.875,
        "y": 2071,
        "wires": []
    },
    {
        "id": "f7945942.8ac8c8",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "Device",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 683.875,
        "y": 2017,
        "wires": []
    },
    {
        "id": "b230fb8a.7c2358",
        "type": "websocket in",
        "z": "68c229e597641891",
        "name": "",
        "server": "b3a3e4ea.e9e948",
        "client": "",
        "x": 220,
        "y": 580,
        "wires": [
            [
                "9564cd2a.5a408",
                "b1e48f2d.af6f7"
            ]
        ]
    },
    {
        "id": "9564cd2a.5a408",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "Keep Alive",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 540,
        "wires": []
    },
    {
        "id": "b1e48f2d.af6f7",
        "type": "websocket out",
        "z": "68c229e597641891",
        "name": "",
        "server": "b3a3e4ea.e9e948",
        "client": "",
        "x": 440,
        "y": 580,
        "wires": []
    },
    {
        "id": "e976474f.ee7848",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/history",
        "method": "get",
        "swaggerDoc": "",
        "x": 230,
        "y": 1460,
        "wires": [
            [
                "e2c7cbeb.cac848"
            ]
        ]
    },
    {
        "id": "e2c7cbeb.cac848",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Get current values",
        "func": "\n\nmsg.payload.id = msg.payload.id.replace(/:/g,'');\nvar id = msg.payload.id;\nvar start = new Date(parseInt(msg.payload.start)).toISOString();\nvar end = new Date(parseInt(msg.payload.end)).toISOString();\n\nvar query = { id: id, startTime: { \"$gt\": start ,  \"$lt\": end } }\n\nif(id)\n{\n    msg.payload = query;\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1460,
        "wires": [
            [
                "7d1762beb5c01f31",
                "dc9824d620d3f31d"
            ]
        ]
    },
    {
        "id": "c87d33a9.f2f53",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "x": 865,
        "y": 1460,
        "wires": []
    },
    {
        "id": "1bd96870.5831c8",
        "type": "tcp in",
        "z": "68c229e597641891",
        "name": "",
        "server": "server",
        "host": "",
        "port": 4000,
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "\\n",
        "topic": "",
        "base64": false,
        "x": 240,
        "y": 940,
        "wires": [
            [
                "2d7a3813.2a4b08",
                "d56498cf731c91ef"
            ]
        ]
    },
    {
        "id": "3f88a0fb.2cb6a",
        "type": "tcp out",
        "z": "68c229e597641891",
        "name": "",
        "host": "",
        "port": "",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "x": 590,
        "y": 880,
        "wires": []
    },
    {
        "id": "2d7a3813.2a4b08",
        "type": "function",
        "z": "68c229e597641891",
        "name": "table",
        "func": "var data = msg.payload.trim();\n//node.warn(data);\nvar json;\n\ntry{\n    json = JSON.parse(data);\n}catch(exp)\n{\n    return [null,null,null];\n}\n\nvar room = json.room;\nvar cmd = json.cmd;\nvar tableId = json.table;\nvar uuid = json.uuid;\n\nif(room === undefined || cmd === undefined || tableId === undefined || uuid === undefined)\n    return [null, null, null];\n\n//var dbMsg = {query:{uuid:json.uuid},payload:json};\nvar dbMsg = {};\nvar query = {uuid:json.uuid};\nvar replaceObj = { \n    $set: \n    {\n        name: json.name,\n        power: json.power,\n        missing: json.missing,\n        ip: json.ip,\n        cmd: json.cmd,\n        uuid: json.uuid,\n        ports: json.ports,\n        dfUrl: json.dfUrl,\n        state: json.state,\n        mode: json.mode,\n        readerIp: json.readerIp,\n        table: json.table,\n        dwell: json.dwell,\n        port: json.port,\n        room: json.room\n  }\n};\n\nvar upsertObj = { upsert: true }\n\n// replace the document\ndbMsg.payload = [query, replaceObj, upsertObj];\n\nif(cmd == \"bye\")\n{\n    delete context.global.sessions[uuid];\n\n}\nelse\n{\n    var now = Math.floor(new Date().getTime()/1000);\n    var session = {id:room, table:json, session:msg._session,lastSeen:now,state:\"ok\"};\n    context.global.sessions[uuid] = session;\n    //node.warn(table+\" \"+JSON.stringify(msg._session));\n}\n   \njson.msgtype = 'tableState';\nvar update = {payload:[json]};\n\nmsg.payload = \"ok\\r\\n\";\nreturn [msg,update,dbMsg];",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 940,
        "wires": [
            [
                "3f88a0fb.2cb6a"
            ],
            [
                "4bff68c1.439a18"
            ],
            [
                "f8021f18e5cb6fbe"
            ]
        ]
    },
    {
        "id": "f62bfe84.42f77",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Message Device",
        "func": "var room = msg.payload.room;\nvar cmd = msg.payload.cmd;\nvar uuid = msg.payload.uuid;\nvar status = {};\nvar guiMsg = {};\nvar dbMsg = {};\n\nguiMsg.payload = [{ msgtype: \"nuc\", room:room,cmd:cmd,uuid:uuid}];\n\nif(cmd.indexOf(\"config\") >=0)\n{\n    var config = JSON.parse(cmd.substring(7));\n    //dbMsg.payload = config;\n    //dbMsg.query = {uuid:config.uuid};\n    var query = {uuid: config.uuid};\n    var newdoc = { $set: \n        {\n            name: config.name,\n            power: config.power,\n            missing: config.missing,\n            ip: config.ip,\n            cmd: config.cmd,\n            uuid: config.uuid,\n            ports: config.ports,\n            dfUrl: config.dfUrl,\n            state: config.state,\n            msgtype: config.msgtype,\n            mode: config.mode,\n            readerIp: config.readerIp,\n            table: config.table,\n            dwell: config.dwell,\n            port: config.port,\n            room: config.room\n        }\n    };\n\n    dbMsg.payload = [\n        query,  // query parameter\n        newdoc  // replacement document\n    ];\n}\nelse\n    dbMsg = null;\n\nvar session = context.global.sessions[uuid];\nif(session)\n{\n\n    var tcpMsg = {};\n    tcpMsg._session = session.session;\n    tcpMsg.payload = cmd+\"\\r\\n\";\n\n    status[uuid]=\"ok\";\n}\nelse\n{\n    tcpMsg = null;\n    status[uuid]=\"No Session\";\n    node.warn(\"no session for \"+uuid);\n}\n\n\nmsg.payload = {status:status};\n\nreturn [tcpMsg,msg,guiMsg,dbMsg];",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2400,
        "wires": [
            [
                "a4fcb197.8fee6",
                "367443ea.47923c"
            ],
            [
                "2ee14b9.4c663b4"
            ],
            [
                "589adbad.e45a24"
            ],
            [
                "c98e848a8404e254"
            ]
        ]
    },
    {
        "id": "a4fcb197.8fee6",
        "type": "tcp out",
        "z": "68c229e597641891",
        "name": "",
        "host": "",
        "port": "",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "x": 645,
        "y": 2380,
        "wires": []
    },
    {
        "id": "92423a1f.0dd1f8",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/nucCmd",
        "method": "post",
        "swaggerDoc": "",
        "x": 220,
        "y": 2400,
        "wires": [
            [
                "f62bfe84.42f77"
            ]
        ]
    },
    {
        "id": "2ee14b9.4c663b4",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "x": 645,
        "y": 2432,
        "wires": []
    },
    {
        "id": "4bff68c1.439a18",
        "type": "websocket out",
        "z": "68c229e597641891",
        "name": "",
        "server": "b3a3e4ea.e9e948",
        "client": "",
        "x": 620,
        "y": 940,
        "wires": []
    },
    {
        "id": "43b381d0.a92d2",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/tables",
        "method": "get",
        "swaggerDoc": "",
        "x": 150,
        "y": 2320,
        "wires": [
            [
                "1cfe797157a230fd"
            ]
        ]
    },
    {
        "id": "da6c5001.aae91",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Get Tables",
        "func": "var tables = {};\n\nfor (var index in context.global.sessions)\n{\n    //node.warn(index);\n    var table = context.global.sessions[index].table;\n    var room = table.room;\n    var id = table.table;\n\n    \n    var list = tables[room];\n    if(list === undefined)\n    {\n        list = {};\n        tables[room] = list;\n    }\n    list[id] = table;\n    if(context.global.sessions[index] !== null)\n    {\n        var state = context.global.sessions[index].state;\n        \n        if(state == \"ok\")\n            table.state = true;\n        else\n            table.state = false;\n    }\n    else\n        table.state = false;\n    \n}\n\nmsg.payload = tables;\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "74f20c56.e28534",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "x": 1050,
        "y": 2220,
        "wires": []
    },
    {
        "id": "b9c6dd14.55649",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/zebra",
        "method": "post",
        "swaggerDoc": "",
        "x": 230,
        "y": 760,
        "wires": [
            [
                "b25b6582.4fe978",
                "6a5ea3.65db815c",
                "cacf3aa4.56e198"
            ]
        ]
    },
    {
        "id": "82169840.576cd8",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "x": 590,
        "y": 820,
        "wires": []
    },
    {
        "id": "b25b6582.4fe978",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "Zebra update",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 700,
        "wires": []
    },
    {
        "id": "6a5ea3.65db815c",
        "type": "function",
        "z": "68c229e597641891",
        "name": "OK",
        "func": "msg.payload = {status:\"ok\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 432,
        "y": 820,
        "wires": [
            [
                "82169840.576cd8"
            ]
        ]
    },
    {
        "id": "cacf3aa4.56e198",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Update",
        "func": "\nfunction isEmpty(obj) {\n    for(var key in obj) {\n        if(obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\n\nfunction getMeta(id)\n{\n    if (context.global.tagmap)\n    {\n        var meta = context.global.tagmap[id];\n        if(meta === undefined)\n            meta = \"unmapped\";\n    }\n    else\n        meta = \"unmapped\";\n    return meta;\n}\n\n\nvar room = msg.payload.id;\n\n\nvar current = context.global.currentOperations[room];\n\n\n\nif(current)\n{\n    \n    var loc = msg.payload.loc;\n\n    \n    var now = Math.floor(new Date().getTime()/1000);\n    var newTags = msg.payload.newTags;\n    var missingTags = msg.payload.missingTags;\n    var replacedTags = msg.payload.replacedTags;\n\n    var startTags = current.tags;\n    \n    var delta = {tags:{}};\n    \n    if(newTags)\n    {\n        for(var i = 0;i<newTags.length;i++)\n        {\n            var id = newTags[i].epc;\n            var tag = startTags[id];\n            if(tag === undefined)\n            {\n                tag = {meta:getMeta(id),t:{}};\n                \n                startTags[id] = tag;\n                tag.loc = loc;\n                tag.count = newTags[i].count;\n                tag.rssi = newTags[i].rssi;\n                \n                var change = {}; \n                change.meta = tag.meta;\n                change.loc = tag.loc;\n                change.count = tag.count;\n                change.rssi = tag.rssi;\n                delta.tags[id] = change;\n                \n            }\n            if(tag.t[loc] == undefined)\n                tag.t[loc] = {};\n                \n            tag.t[loc].loc = loc;\n            tag.t[loc].count = newTags[i].count;\n            tag.t[loc].rssi = newTags[i].rssi;\n\n        }\n        \n        // send new first\n        if(!isEmpty(delta.tags))\n        {\n            delta.room = room;\n            delta.msgtype = \"update\";\n    \n            node.send({payload:[delta]});\n        }\n    }\n\n    if(missingTags)\n    {\n        for(var i = 0;i<missingTags.length;i++)\n        {\n            var id = missingTags[i];\n            var tag = startTags[id];\n         \n            if(tag)\n            {\n                tag.t[loc].loc = \"U\";\n            }\n        }\n    }\n    \n    if(replacedTags)\n    {\n        for(var i = 0;i<replacedTags.length;i++)\n        {\n            var id = replacedTags[i].epc;\n            var tag = startTags[id];\n         \n            if(tag)\n            {\n                tag.t[loc].loc = loc;\n                tag.t[loc].count = replacedTags[i].count;\n                tag.t[loc].rssi = replacedTags[i].rssi;\n            }\n\n        }\n    }\n    \n    delta = {tags:{}};\n    \n    for(var tid in startTags)\n    {\n        var tag = startTags[tid];\n\n        var unknownCount = 0;\n        var max = 0;\n        var newLoc = 'U';\n        for(var j in tag.t)\n        {           \n            if(tag.t[j].loc != 'U') \n            {\n                if(tag.t[j].count > max)\n                {\n                    max = tag.t[j].count;\n                    newLoc = j;\n                }\n            }\n        }\n                  \n        if (tag.loc != newLoc)\n        {\n            tag.loc = newLoc;\n            \n            if(newLoc != 'U') \n            {         \n                if(tag.startTime > 0) // capture inuse time \n                {\n                    tag.inuse = tag.inuse + (now - tag.startTime);\n                    tag.startTime = 0;\n                }\n            }\n            else // missing\n            {\n                if(tag.startTime === undefined) // first time missing\n                {\n                    tag.inuse = 0;\n                }\n\n                if(tag.startTime > 0)\n                {\n                    tag.inuse = tag.inuse + (now - tag.startTime);\n                }\n                tag.startTime = now;\n            }\n            \n            var dchange = {}; \n            dchange.loc = tag.loc;\n            dchange.count = tag.count;\n            dchange.rssi = tag.rssi;\n            dchange.inuse = tag.inuse;\n            delta.tags[tid] = dchange;\n        }\n        \n    }\n    \n    \n    if(!isEmpty(delta.tags))\n    {\n        delta.room = room;\n        delta.msgtype = \"update\";\n    \n        return {payload:[delta]};\n    }\n}\nelse\n    node.warn(\"no current OR room\");\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 760,
        "wires": [
            [
                "ca586540.3bbb98",
                "704b6be4.6ff164"
            ]
        ]
    },
    {
        "id": "ca586540.3bbb98",
        "type": "websocket out",
        "z": "68c229e597641891",
        "name": "",
        "server": "b3a3e4ea.e9e948",
        "client": "",
        "x": 640,
        "y": 760,
        "wires": []
    },
    {
        "id": "704b6be4.6ff164",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "Gui update",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 700,
        "wires": []
    },
    {
        "id": "8f2b89b5.953fb8",
        "type": "inject",
        "z": "68c229e597641891",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 1240,
        "wires": [
            [
                "44629080.dea0e"
            ]
        ]
    },
    {
        "id": "798cef4b.4a7bc",
        "type": "websocket out",
        "z": "68c229e597641891",
        "name": "",
        "server": "b3a3e4ea.e9e948",
        "client": "",
        "x": 658,
        "y": 1242,
        "wires": []
    },
    {
        "id": "44629080.dea0e",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Refresh inuse time",
        "func": "\nfunction isEmpty(obj) {\n    for(var key in obj) {\n        if(obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\n\nvar now = Math.floor(new Date().getTime()/1000);\nfor(var room in context.global.currentOperations)\n{\n    var current = context.global.currentOperations[room];\n\n    if(current)\n    {\n        current.elapsed += 5;\n        var min = Math.ceil(current.elapsed/60);\n        var hindex = Math.floor(min/8);\n        var bit = min%8;\n\n\n        var delta = {tags:{}};\n        var tags = current.tags;\n        for(var id in tags)\n        {\n            var tag = tags[id];\n            if(tag.startTime > 0 && tag.loc == 'U')\n            {\n                var duration = Math.ceil(now-tag.startTime);\n\n                if(tag.history === undefined)\n                {\n                    tag.history = [];\n                    tag.history.push([current.elapsed, duration]);\n                }\n\n                var last = tag.history[tag.history.length-1];\n                if(tag.startTime > (current.startTime/1000+last[0]))\n                {\n                    tag.history.push([current.elapsed, duration]);\n                }\n                else\n                {\n                    last[1] = duration;\n                }\n                \n                var change = {};\n                change.inuse = tag.inuse + (now - tag.startTime);\n                change.history = tag.history;\n                delta.tags[id] = change;\n\n            }\n            \n        }\n\n        if(!isEmpty(delta.tags))\n        {\n            delta.room = room;\n            delta.msgtype = \"update\";\n            delta.elapsedTime = current.elapsed;\n    \n            msg.payload = [delta];\n            node.send(msg);\n        }\n    }\n}\n\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 443,
        "y": 1242,
        "wires": [
            [
                "798cef4b.4a7bc"
            ]
        ]
    },
    {
        "id": "d7b4badd.952d38",
        "type": "inject",
        "z": "68c229e597641891",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 234.890625,
        "y": 1089,
        "wires": [
            [
                "4be139cb.f6c428"
            ]
        ]
    },
    {
        "id": "79f4869e.e2e6f8",
        "type": "websocket out",
        "z": "68c229e597641891",
        "name": "",
        "server": "b3a3e4ea.e9e948",
        "client": "",
        "x": 640,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4be139cb.f6c428",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Audit Sessions",
        "func": "\n\nvar now = Math.floor(new Date().getTime()/1000);\nfor(var key in context.global.sessions)\n{\n\n    var session = context.global.sessions[key];\n\n    if(session)\n    {\n        //node.warn(\"audit \"+(now - session.lastSeen))\n        if(now - session.lastSeen > 90)\n        {\n            var id = session.id;\n            var tableId = session.table.table;\n            var room = session.table.room;\n            var json = session.table;\n\n            json.cmd = \"stale\";\n            var tcpMsg = {};\n            tcpMsg._session = session.session;\n            tcpMsg.payload = \"stale\\r\\n\";\n            var dbMsg = { query: { uuid: json.uuid }, payload: json };\n            json.msgtype = \"stale\";\n            var update = { payload: [json] };\n\n            node.send([dbMsg,update,tcpMsg]);\n            delete context.global.sessions[key];          \n        }      \n    }\n}\n\n\nreturn [null,null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 435.296875,
        "y": 1090,
        "wires": [
            [
                "f8021f18e5cb6fbe"
            ],
            [
                "79f4869e.e2e6f8",
                "4ccc8b8a.853c84"
            ],
            [
                "a3e04bf55df6158e"
            ]
        ]
    },
    {
        "id": "367443ea.47923c",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 791.8125,
        "y": 2415,
        "wires": []
    },
    {
        "id": "4ccc8b8a.853c84",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "Audit",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1080,
        "wires": []
    },
    {
        "id": "589adbad.e45a24",
        "type": "websocket out",
        "z": "68c229e597641891",
        "name": "",
        "server": "b3a3e4ea.e9e948",
        "client": "",
        "x": 660,
        "y": 2480,
        "wires": []
    },
    {
        "id": "d56498cf731c91ef",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "Device",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 410,
        "y": 880,
        "wires": []
    },
    {
        "id": "aa1c98ab36cb6108",
        "type": "subflow:d5a072f2bbd52ce4",
        "z": "68c229e597641891",
        "name": "",
        "env": [],
        "x": 580,
        "y": 160,
        "wires": [
            [
                "6f9f0ca5c3cb094f"
            ]
        ]
    },
    {
        "id": "b06d185f2a59735d",
        "type": "subflow:d5a072f2bbd52ce4",
        "z": "68c229e597641891",
        "x": 610,
        "y": 320,
        "wires": [
            [
                "cd3e0eadadc0e196"
            ]
        ]
    },
    {
        "id": "b21c35129b3380b0",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Update DB",
        "func": "var id = msg.payload.id;\nvar current = context.global.currentOperations[id];\nif (current)\n{\n    // add the procedure duration to the data pass before inserting\n    // into the registry collection\n    msg.payload.lastTime = new Date().toISOString();\n    msg.payload.endTime = msg.payload.lastTime;\n    msg.payload.startTime = new Date(current.startTime).toISOString();\n    msg.payload.state = \"stopped\";\n    return msg;\n}\nreturn null;\n\n    \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1860,
        "wires": [
            [
                "6cc07141.33f15",
                "3512a874.11c318",
                "166877d2333dc196"
            ]
        ]
    },
    {
        "id": "feb1f430d69fabdb",
        "type": "inject",
        "z": "68c229e597641891",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 950,
        "y": 2100,
        "wires": [
            [
                "0bc7a93ac5ae8312"
            ]
        ]
    },
    {
        "id": "0bc7a93ac5ae8312",
        "type": "function",
        "z": "68c229e597641891",
        "name": "stop all",
        "func": "for (var i in context.global.currentOperations)\n{\n    var current = context.global.currentOperations[i];\n    current.state = \"stopped\";\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "7d1762beb5c01f31",
        "type": "subflow:d5a072f2bbd52ce4",
        "z": "68c229e597641891",
        "x": 680,
        "y": 1460,
        "wires": [
            [
                "c87d33a9.f2f53",
                "5e53fa595948b65a"
            ]
        ]
    },
    {
        "id": "d98a1972bf2ebd8c",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/delete",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 420,
        "wires": [
            [
                "82f524c16205a40e"
            ]
        ]
    },
    {
        "id": "82f524c16205a40e",
        "type": "function",
        "z": "68c229e597641891",
        "name": "get",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 420,
        "wires": [
            [
                "286d942e418ca24f",
                "18da874a82268634"
            ]
        ]
    },
    {
        "id": "286d942e418ca24f",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 570,
        "y": 480,
        "wires": []
    },
    {
        "id": "dc9824d620d3f31d",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "History",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 660,
        "y": 1400,
        "wires": []
    },
    {
        "id": "5e53fa595948b65a",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "History",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 840,
        "y": 1420,
        "wires": []
    },
    {
        "id": "8c6d6c8d02225619",
        "type": "function",
        "z": "68c229e597641891",
        "name": "OR_101",
        "func": "msg.payload = context.global.currentOperations[\"OR_101\"];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 240,
        "wires": [
            [
                "b9860779fa31bcda"
            ]
        ]
    },
    {
        "id": "b2a05cb358c373ad",
        "type": "inject",
        "z": "68c229e597641891",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 240,
        "wires": [
            [
                "8c6d6c8d02225619"
            ]
        ]
    },
    {
        "id": "b9860779fa31bcda",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 240,
        "wires": []
    },
    {
        "id": "ce5b3c90c405b02f",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/tagmap",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 1320,
        "wires": [
            [
                "ece54b1cfcab4fcd",
                "9e47b13e456c2538"
            ]
        ]
    },
    {
        "id": "ece54b1cfcab4fcd",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "x": 450,
        "y": 1380,
        "wires": []
    },
    {
        "id": "9e47b13e456c2538",
        "type": "function",
        "z": "68c229e597641891",
        "name": "",
        "func": "\nvar tag = msg.payload.tag;\nvar meta = msg.payload.meta;\n\nif (tag && meta) {\n    for (var index in context.global.currentOperations) {\n        var current = context.global.currentOperations[index];\n        var item = current.tags[tag];\n        if (item) {\n            item.meta = meta;\n        }\n    }\n    context.global.tagmap[tag] = meta;\n    //var update = { payload: context.global.tagmap };\n    //return update;\n    var dbMsg = {};\n    dbMsg.payload = [\n        {},      // empty query updates the first doc in collection\n        context.global.tagmap,\n        {upsert: true}\n    ];\n    return dbMsg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1320,
        "wires": [
            [
                "9c2cd54d98b72584"
            ]
        ]
    },
    {
        "id": "a00cb4f5d4248733",
        "type": "inject",
        "z": "68c229e597641891",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "86993d7c8f716fa4"
            ]
        ]
    },
    {
        "id": "86993d7c8f716fa4",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Meta",
        "func": "context.global.sessions = {};\ncontext.global.currentOperations = {};\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "b2a94f4007c217ff"
            ]
        ]
    },
    {
        "id": "1fcf1b7b26b45dee",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "Meta",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 100,
        "wires": []
    },
    {
        "id": "688b620af513cd5d",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Save Meta",
        "func": "context.global.tagmap = msg.payload[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 100,
        "wires": [
            [
                "1fcf1b7b26b45dee"
            ]
        ]
    },
    {
        "id": "e02c659c6e2949f4",
        "type": "function",
        "z": "68c229e597641891",
        "name": "clear all operations",
        "func": "context.global.currentOperations = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "049a352c7d84dded",
        "type": "inject",
        "z": "68c229e597641891",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 580,
        "wires": [
            [
                "e02c659c6e2949f4"
            ]
        ]
    },
    {
        "id": "967c9c809d24c80a",
        "type": "exec",
        "z": "68c229e597641891",
        "command": "ip addr show",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1090,
        "y": 420,
        "wires": [
            [
                "acf78603aad7e83b"
            ],
            [
                "acf78603aad7e83b"
            ],
            [
                "acf78603aad7e83b"
            ]
        ]
    },
    {
        "id": "5932b9b0d6ad3423",
        "type": "inject",
        "z": "68c229e597641891",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 920,
        "y": 420,
        "wires": [
            [
                "967c9c809d24c80a"
            ]
        ]
    },
    {
        "id": "acf78603aad7e83b",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 420,
        "wires": []
    },
    {
        "id": "eb3fe0611b6ed061",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Init tagmap",
        "func": "msg.payload = { \"tag\": \"meta\"};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 40,
        "wires": [
            [
                "84601d9d35e69641"
            ]
        ]
    },
    {
        "id": "4bb1d9af2fbad297",
        "type": "inject",
        "z": "68c229e597641891",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 40,
        "wires": [
            [
                "eb3fe0611b6ed061"
            ]
        ]
    },
    {
        "id": "fc371a34dc68de4b",
        "type": "inject",
        "z": "68c229e597641891",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 260,
        "y": 2260,
        "wires": [
            [
                "25737cdb883831f5"
            ]
        ]
    },
    {
        "id": "25737cdb883831f5",
        "type": "function",
        "z": "68c229e597641891",
        "name": "find tables",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2260,
        "wires": [
            [
                "4df68d98a5f9dbf1"
            ]
        ]
    },
    {
        "id": "92860d02efe0d983",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "Test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2300,
        "wires": []
    },
    {
        "id": "2fe07a27c4a7a5c0",
        "type": "function",
        "z": "68c229e597641891",
        "name": "table list",
        "func": "var tables = msg.payload;\n\nvar all = {};\nfor(var index in tables)\n{\n    var table = tables[index];\n    delete table._id;\n    var room = table.room;\n\n    var list = all[room];\n    if(list === undefined)\n    {\n        list = {};\n        all[room] = list;\n    }\n    list[table.uuid] = table;\n\n    var uuid = table.uuid;\n    var session = context.global.sessions[uuid];\n    if(session && session.state == \"ok\")\n        table.state = true;\n    else\n        table.state = false;\n}\nmsg.payload = all;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 2220,
        "wires": [
            [
                "74f20c56.e28534"
            ]
        ]
    },
    {
        "id": "7bf10376ec56f394",
        "type": "function",
        "z": "68c229e597641891",
        "name": "clear tables",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2640,
        "wires": [
            [
                "0e106e09b4121c7c"
            ]
        ]
    },
    {
        "id": "b8124afabcce9667",
        "type": "inject",
        "z": "68c229e597641891",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 220,
        "y": 2640,
        "wires": [
            [
                "7bf10376ec56f394"
            ]
        ]
    },
    {
        "id": "1cfe797157a230fd",
        "type": "function",
        "z": "68c229e597641891",
        "name": "auth",
        "func": "var token = msg.req.headers.token;\nvar valid = context.global.isTokenValid(token);\n\nif(valid)\n    return [msg, null];\n\nmsg.payload = {};\nreturn [null,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2320,
        "wires": [
            [
                "25737cdb883831f5"
            ],
            [
                "9ce9c2903c6c59bd"
            ]
        ]
    },
    {
        "id": "9ce9c2903c6c59bd",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "x": 470,
        "y": 2320,
        "wires": []
    },
    {
        "id": "80024d85e763c31e",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/delTable",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 2780,
        "wires": [
            [
                "87ffe5a7b92964e9",
                "c5be5a8b40a5b919"
            ]
        ]
    },
    {
        "id": "87ffe5a7b92964e9",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 380,
        "y": 2880,
        "wires": []
    },
    {
        "id": "c5be5a8b40a5b919",
        "type": "function",
        "z": "68c229e597641891",
        "name": "clear tables",
        "func": "\nvar uuid = msg.payload.uuid;\nmsg.query = { uuid: uuid };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2780,
        "wires": [
            [
                "930a486a375f8984"
            ]
        ]
    },
    {
        "id": "1cadba4e.daef16",
        "type": "catch",
        "z": "68c229e597641891",
        "name": "",
        "scope": null,
        "x": 920,
        "y": 40,
        "wires": [
            [
                "d0b577b3.e529b8"
            ]
        ]
    },
    {
        "id": "d0b577b3.e529b8",
        "type": "function",
        "z": "68c229e597641891",
        "name": "Error Response",
        "func": "var errorMessage = \"Server Error\";\n\nif (msg.hasOwnProperty(\"error\")) {\n   if (msg.error.source.hasOwnProperty(\"name\")) {\n    errorMessage += \":\" +  msg.error.source.name;\n   }\n   if (msg.error.source.hasOwnProperty(\"id\")) {\n    errorMessage += \":\" +  msg.error.source.id;\n   }    \n   if (msg.error.source.hasOwnProperty(\"type\")) {\n    errorMessage += \":\" +  msg.error.source.type;\n   }     \n   \n   errorMessage += msg.error.message;\n}\n\nnode.warn(errorMessage);\n\n// For return message:\nif (msg.res !== undefined){\n    msg.payload = errorMessage;\n    msg.statusCode = 500;\n    return msg;\n} else {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1114,
        "y": 40,
        "wires": [
            [
                "6b10154e.a66cfc"
            ]
        ]
    },
    {
        "id": "6b10154e.a66cfc",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "x": 1300,
        "y": 40,
        "wires": []
    },
    {
        "id": "a3e04bf55df6158e",
        "type": "tcp out",
        "z": "68c229e597641891",
        "name": "",
        "host": "",
        "port": "",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "x": 610,
        "y": 1180,
        "wires": []
    },
    {
        "id": "2887eef8b822e6e7",
        "type": "http in",
        "z": "68c229e597641891",
        "name": "",
        "url": "/permitted",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 3020,
        "wires": [
            [
                "7a194b642f4fa720",
                "6190b627d5078ccd"
            ]
        ]
    },
    {
        "id": "7a194b642f4fa720",
        "type": "function",
        "z": "68c229e597641891",
        "name": "",
        "func": "var permitted = []\npermitted[\"rx024d@att.com\"] = [\"all\"];\npermitted[\"joshua.mecca@msbiotics.com\"] = [\"all\"];\npermitted[\"sri.v@msbiotics.com\"] = [\"all\"];\npermitted[\"rick.mcconney@gmail.com\"] = [\"OR_101\"];\npermitted[\"scott.hendrickson@va.gov\"] = [\"VA_101\"];\npermitted[\"user1@msb.com\"] = [\"VA_101\"];\npermitted[\"user2@msb.com\"] = [\"VA_101\"];\npermitted[\"russd@mestizo.cc\"] = [\"all\"];\n\n\nif (msg.payload.user && permitted[msg.payload.user])\n    msg.payload = permitted[msg.payload.user];\nelse\n    msg.payload = [];\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 3020,
        "wires": [
            [
                "222a0ef843dff7e9",
                "527170a3dc1b89e6"
            ]
        ]
    },
    {
        "id": "222a0ef843dff7e9",
        "type": "http response",
        "z": "68c229e597641891",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 3020,
        "wires": []
    },
    {
        "id": "6190b627d5078ccd",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 3080,
        "wires": []
    },
    {
        "id": "527170a3dc1b89e6",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 3100,
        "wires": []
    },
    {
        "id": "84601d9d35e69641",
        "type": "mongodb4",
        "z": "68c229e597641891",
        "clientNode": "0243e6b7fe23352f",
        "mode": "collection",
        "collection": "meta",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertOne - meta",
        "x": 650,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "b2a94f4007c217ff",
        "type": "mongodb4",
        "z": "68c229e597641891",
        "clientNode": "0243e6b7fe23352f",
        "mode": "collection",
        "collection": "meta",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "find.toArray - meta",
        "x": 650,
        "y": 100,
        "wires": [
            [
                "688b620af513cd5d"
            ]
        ]
    },
    {
        "id": "18da874a82268634",
        "type": "mongodb4",
        "z": "68c229e597641891",
        "clientNode": "0243e6b7fe23352f",
        "mode": "collection",
        "collection": "registry",
        "operation": "deleteMany",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "deleteMany - registry",
        "x": 640,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "f8021f18e5cb6fbe",
        "type": "mongodb4",
        "z": "68c229e597641891",
        "clientNode": "0243e6b7fe23352f",
        "mode": "collection",
        "collection": "tables",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "updateOne - tables",
        "x": 630,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "9c2cd54d98b72584",
        "type": "mongodb4",
        "z": "68c229e597641891",
        "clientNode": "0243e6b7fe23352f",
        "mode": "collection",
        "collection": "meta",
        "operation": "replaceOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "updateOne - meta",
        "x": 690,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "166877d2333dc196",
        "type": "mongodb4",
        "z": "68c229e597641891",
        "clientNode": "0243e6b7fe23352f",
        "mode": "collection",
        "collection": "registry",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertOne - registry stop",
        "x": 830,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "4df68d98a5f9dbf1",
        "type": "mongodb4",
        "z": "68c229e597641891",
        "clientNode": "0243e6b7fe23352f",
        "mode": "collection",
        "collection": "tables",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "get tables",
        "x": 660,
        "y": 2260,
        "wires": [
            [
                "2fe07a27c4a7a5c0",
                "92860d02efe0d983"
            ]
        ]
    },
    {
        "id": "c98e848a8404e254",
        "type": "mongodb4",
        "z": "68c229e597641891",
        "clientNode": "0243e6b7fe23352f",
        "mode": "collection",
        "collection": "tables",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "updateOne - tables",
        "x": 630,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "0e106e09b4121c7c",
        "type": "mongodb4",
        "z": "68c229e597641891",
        "clientNode": "0243e6b7fe23352f",
        "mode": "collection",
        "collection": "tables",
        "operation": "deleteMany",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "clear tables",
        "x": 610,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "930a486a375f8984",
        "type": "mongodb4",
        "z": "68c229e597641891",
        "clientNode": "0243e6b7fe23352f",
        "mode": "collection",
        "collection": "tables",
        "operation": "deleteMany",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "deleteMany - tables delTable",
        "x": 660,
        "y": 2780,
        "wires": [
            []
        ]
    },
    {
        "id": "7f9717faea250c4e",
        "type": "mqtt in",
        "z": "68c229e597641891",
        "name": "Table MQTT",
        "topic": "nuc/msgs",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "b2d41a876c2108ca",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 3200,
        "wires": [
            [
                "f226f12e40895042"
            ]
        ]
    },
    {
        "id": "f226f12e40895042",
        "type": "debug",
        "z": "68c229e597641891",
        "name": "debug mqtt",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 3200,
        "wires": []
    },
    {
        "id": "42957c37084c9cdf",
        "type": "file",
        "z": "06072a21a812d30b",
        "name": "",
        "filename": "AttLog",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "x": 630,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "a3ab61dd9be0b1be",
        "type": "function",
        "z": "06072a21a812d30b",
        "name": "Clear Log",
        "func": "var date = new Date();\n\nmsg.payload = date.toISOString()+\": Cleared\";\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 455,
        "y": 560,
        "wires": [
            [
                "42957c37084c9cdf"
            ]
        ]
    },
    {
        "id": "c54c222b7b618c4a",
        "type": "inject",
        "z": "06072a21a812d30b",
        "name": "Clear Log",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 560,
        "wires": [
            [
                "a3ab61dd9be0b1be"
            ]
        ]
    },
    {
        "id": "0689594f2ba0a304",
        "type": "inject",
        "z": "06072a21a812d30b",
        "name": "View Log",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 240,
        "wires": [
            [
                "a292fa66f891a0b8"
            ]
        ]
    },
    {
        "id": "58f3cd1165ed6c70",
        "type": "debug",
        "z": "06072a21a812d30b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 615,
        "y": 240,
        "wires": []
    },
    {
        "id": "55db257e14f22b54",
        "type": "http in",
        "z": "06072a21a812d30b",
        "name": "",
        "url": "/log",
        "method": "get",
        "swaggerDoc": "",
        "x": 271.609375,
        "y": 357,
        "wires": [
            [
                "471df61c80a4e535"
            ]
        ]
    },
    {
        "id": "61635b21c88a8723",
        "type": "http response",
        "z": "06072a21a812d30b",
        "name": "",
        "x": 991.609375,
        "y": 357,
        "wires": []
    },
    {
        "id": "7ea42feb9bf027af",
        "type": "function",
        "z": "06072a21a812d30b",
        "name": "Format log",
        "func": "var filter = msg.filter;\nvar lines = msg.payload;\nvar log = \"\";\nfor(var i = 0;i<lines.length;i++)\n{\n   if(filter === undefined || lines[i].indexOf(filter) >=0)\n        log += \"<p>\"+lines[i]+\"</p>\"; \n}\n\nvar events = context.global.eventlog;\n\nfor(var i = 0;i<events.length;i++)\n{\n    if(filter === undefined || events[i].indexOf(filter) >=0)\n        log += \"<p>\"+events[i]+\"</p>\";\n}\n\nmsg.payload = log;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 816.609375,
        "y": 357,
        "wires": [
            [
                "61635b21c88a8723"
            ]
        ]
    },
    {
        "id": "471df61c80a4e535",
        "type": "function",
        "z": "06072a21a812d30b",
        "name": "Filter",
        "func": "msg.filter = msg.payload.filter;\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 451.609375,
        "y": 357,
        "wires": [
            [
                "7bb6e5a89566eba1"
            ]
        ]
    },
    {
        "id": "748e120f3acd24b8",
        "type": "inject",
        "z": "06072a21a812d30b",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 275,
        "y": 160,
        "wires": [
            [
                "2854908935a09a57"
            ]
        ]
    },
    {
        "id": "2854908935a09a57",
        "type": "function",
        "z": "06072a21a812d30b",
        "name": "Log",
        "func": "context.global.eventlog = [];\n\nfunction log(tag,data)\n{\n    var date = new Date();\n    var line;\n    \n    if(typeof data === 'object')\n    {\n        if(data.payload === undefined)\n            line = date.toISOString()+\": \"+tag+\" \"+JSON.stringify(data); \n        else \n            line = date.toISOString()+\": \"+tag+\" \"+JSON.stringify(data.payload);\n    }\n\n    else\n        line = date.toISOString()+\": \"+tag+\" \"+data;\n\n\n    context.global.eventlog.push(line);\n}\n\n\ncontext.global.log = log;\n\ncontext.global.log(\"Restart \",\"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "81f0e7c5d5fd3b93",
        "type": "file",
        "z": "06072a21a812d30b",
        "name": "",
        "filename": "AttLog",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 630,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "46a1813e9c402b9b",
        "type": "function",
        "z": "06072a21a812d30b",
        "name": "Write Log",
        "func": "var events = context.global.eventlog;\n\nfor(var i = 0;i<events.length;i++)\n{\n    msg.payload = events[i];\n    node.send(msg)\n}\n\ncontext.global.eventlog = [];\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 455,
        "y": 460,
        "wires": [
            [
                "81f0e7c5d5fd3b93"
            ]
        ]
    },
    {
        "id": "22879e6edb0f77c0",
        "type": "inject",
        "z": "06072a21a812d30b",
        "name": "Write Log",
        "repeat": "30",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 275,
        "y": 460,
        "wires": [
            [
                "46a1813e9c402b9b"
            ]
        ]
    },
    {
        "id": "a292fa66f891a0b8",
        "type": "file in",
        "z": "06072a21a812d30b",
        "name": "",
        "filename": "AttLog",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 240,
        "wires": [
            [
                "58f3cd1165ed6c70"
            ]
        ]
    },
    {
        "id": "7bb6e5a89566eba1",
        "type": "file in",
        "z": "06072a21a812d30b",
        "name": "",
        "filename": "AttLog",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "7ea42feb9bf027af"
            ]
        ]
    },
    {
        "id": "455cc10f2599df2f",
        "type": "http in",
        "z": "33eb1833b0dac91f",
        "name": "",
        "url": "/encrypt",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 280,
        "wires": [
            [
                "f0e52fa8ee6e80c8"
            ]
        ]
    },
    {
        "id": "f32c373dc8ff7feb",
        "type": "http response",
        "z": "33eb1833b0dac91f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "977a7ba7919c73f5",
        "type": "http in",
        "z": "33eb1833b0dac91f",
        "name": "",
        "url": "/decrypt",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "5df4c6a404e574bc"
            ]
        ]
    },
    {
        "id": "2efca072d88b4cbb",
        "type": "http response",
        "z": "33eb1833b0dac91f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1040,
        "y": 380,
        "wires": []
    },
    {
        "id": "5df4c6a404e574bc",
        "type": "function",
        "z": "33eb1833b0dac91f",
        "name": "",
        "func": "\nmsg.token = msg.payload.token;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 380,
        "wires": [
            [
                "d966b99977983f3b"
            ]
        ]
    },
    {
        "id": "765b1ede02057584",
        "type": "function",
        "z": "33eb1833b0dac91f",
        "name": "",
        "func": "\nmsg.payload = msg.token;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 380,
        "wires": [
            [
                "2efca072d88b4cbb"
            ]
        ]
    },
    {
        "id": "c11f5bf0a11c9ca7",
        "type": "function",
        "z": "33eb1833b0dac91f",
        "name": "",
        "func": "\nmsg.payload = msg.token;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "f32c373dc8ff7feb"
            ]
        ]
    },
    {
        "id": "8bc0ad3a990dc47a",
        "type": "http in",
        "z": "33eb1833b0dac91f",
        "name": "",
        "url": "/.well-known/*",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 540,
        "wires": [
            [
                "43b491128b94f73f"
            ]
        ]
    },
    {
        "id": "790bba4cf4b01937",
        "type": "http response",
        "z": "33eb1833b0dac91f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 540,
        "wires": []
    },
    {
        "id": "1f5a58bee14383e8",
        "type": "http in",
        "z": "33eb1833b0dac91f",
        "name": "",
        "url": "/jwt",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 720,
        "wires": [
            [
                "5c977556b951526d"
            ]
        ]
    },
    {
        "id": "5c977556b951526d",
        "type": "function",
        "z": "33eb1833b0dac91f",
        "name": "",
        "func": "function  isTokenValid(token)\n{\n    try{\n        var body = token.split('.')[1];\n        node.warn(body);\n        let buff = Buffer.from(body, 'base64');\n        let text = buff.toString('ascii');\n        node.warn(text);\n        var json = JSON.parse(text);\n        return true;\n    }catch (e)\n    {\n\n    }\n    return false;\n}\n\nvar token = msg.payload.token;\n\n\nmsg.payload = \"token valied = \"+context.global.isTokenValid(token);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 720,
        "wires": [
            [
                "0953f44ad690bd9c"
            ]
        ]
    },
    {
        "id": "0953f44ad690bd9c",
        "type": "http response",
        "z": "33eb1833b0dac91f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 570,
        "y": 720,
        "wires": []
    },
    {
        "id": "8e3c93bab45ebbcb",
        "type": "inject",
        "z": "33eb1833b0dac91f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "b7f929e4d630a55a"
            ]
        ]
    },
    {
        "id": "b7f929e4d630a55a",
        "type": "function",
        "z": "33eb1833b0dac91f",
        "name": "",
        "func": "function  isTokenValid(token)\n{\n    try{\n        var tokens = token.split('.');\n        var header = tokens[0];\n        var body = tokens[1];\n        var sig = tokens[2];\n\n        //node.warn(\"Header = \"+header);\n       // node.warn(\"Payload = \"+body);\n       // node.warn(\"sig = \"+sig);\n        let buff = Buffer.from(body, 'base64');\n        let text = buff.toString('ascii');\n        //node.warn(text);\n        var json = JSON.parse(text);\n        return true;\n    }catch (e)\n    {\n\n    }\n    return false;\n}\n\ncontext.global.isTokenValid = isTokenValid;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1c04bc5951752ebd",
        "type": "http in",
        "z": "33eb1833b0dac91f",
        "name": "",
        "url": "/sha256",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "8b5d926ae43afafd"
            ]
        ]
    },
    {
        "id": "8b5d926ae43afafd",
        "type": "function",
        "z": "33eb1833b0dac91f",
        "name": "",
        "func": "\nmsg.payload = msg.payload.token;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "2a8d2c214561c50d"
            ]
        ]
    },
    {
        "id": "423c0e9f31d1a6ba",
        "type": "http response",
        "z": "33eb1833b0dac91f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 220,
        "wires": []
    },
    {
        "id": "a3f94a4e7428a2cc",
        "type": "http in",
        "z": "33eb1833b0dac91f",
        "name": "",
        "url": "/rsadecrypt",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 860,
        "wires": [
            [
                "9c6fd2906b6b9e8b"
            ]
        ]
    },
    {
        "id": "dc09074e0bc5fb98",
        "type": "http response",
        "z": "33eb1833b0dac91f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1020,
        "y": 860,
        "wires": []
    },
    {
        "id": "9c6fd2906b6b9e8b",
        "type": "function",
        "z": "33eb1833b0dac91f",
        "name": "",
        "func": "\nmsg.payload = msg.payload.token;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 860,
        "wires": [
            [
                "b5d06306aaaabcd8"
            ]
        ]
    },
    {
        "id": "33bffc33de65535c",
        "type": "function",
        "z": "33eb1833b0dac91f",
        "name": "",
        "func": "\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 860,
        "wires": [
            [
                "dc09074e0bc5fb98"
            ]
        ]
    },
    {
        "id": "5d06b3ec3e648758",
        "type": "http in",
        "z": "33eb1833b0dac91f",
        "name": "",
        "url": "/tagnet",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1020,
        "wires": [
            [
                "2678fdcc6053282e",
                "3cfedf98e8a1b9ff"
            ]
        ]
    },
    {
        "id": "69c854a06628e46d",
        "type": "http response",
        "z": "33eb1833b0dac91f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1080,
        "wires": []
    },
    {
        "id": "2678fdcc6053282e",
        "type": "debug",
        "z": "33eb1833b0dac91f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3cfedf98e8a1b9ff",
        "type": "function",
        "z": "33eb1833b0dac91f",
        "name": "",
        "func": "let id = msg.payload.OutboundTransactionRequest.OutboundTransaction.TransactionID;\n\n\nmsg.payload = {\n    \"OutboundTransactionResponse\": {\n        \"IsSuccess\": \"true\",\n        \"Message\": \"Transaction \"+id+\" success.\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1080,
        "wires": [
            [
                "69c854a06628e46d"
            ]
        ]
    },
    {
        "id": "082df11b905e3e61",
        "type": "http in",
        "z": "33eb1833b0dac91f",
        "name": "",
        "url": "/bonafideAuth",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1180,
        "wires": [
            [
                "47a4bb214ba038e8",
                "279ed995d179f6c5"
            ]
        ]
    },
    {
        "id": "1abc4879ee9e6137",
        "type": "http response",
        "z": "33eb1833b0dac91f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1240,
        "wires": []
    },
    {
        "id": "47a4bb214ba038e8",
        "type": "debug",
        "z": "33eb1833b0dac91f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 1180,
        "wires": []
    },
    {
        "id": "279ed995d179f6c5",
        "type": "function",
        "z": "33eb1833b0dac91f",
        "name": "",
        "func": "var d = new Date();\nvar day = d.getDate();\nif(day < 10) day = \"0\"+day;\nvar month = d.getMonth()+1;\nif(month < 10) month = \"0\"+month;\n\nvar datestring = d.getFullYear()+\"-\"+ month + \"-\" + day + \" \" +\n    d.getHours() + \":\" + d.getMinutes()+\":00:000\";\n\n\n/*\nmsg.payload = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<AuthorizationTokenResponse\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    <Valid>true</Valid>\n    <User>rx024d</User>\n    <Token>74722046-b4c0-4a95-b865-3eed7c7ed410</Token>\n    <Message></Message>\n    <Issued>`+datestring+`</Issued>\n    <Expires>2024-12-30 00:00:00:000</Expires>\n</AuthorizationTokenResponse>\n`;\n*/\n\nmsg.payload = { \"AuthorizationTokenResponse\":\n    {\n        \"Valid\":true,\n        \"User\":\"rx024d\",\n        \"Token\": \"74722046-b4c0-4a95-b865-3eed7c7ed410\",\n        \"Message\": \"\",\n        \"Issued\":datestring,\n        \"Expires\":\"2024-12-30 00:00:00:000\"\n    }\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1240,
        "wires": [
            [
                "1abc4879ee9e6137"
            ]
        ]
    },
    {
        "id": "83b979a42d9bdf4e",
        "type": "http in",
        "z": "33eb1833b0dac91f",
        "name": "",
        "url": "/bridge",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1300,
        "wires": [
            [
                "7a647b438cb0febe",
                "0b9d0cb65d686547"
            ]
        ]
    },
    {
        "id": "7a647b438cb0febe",
        "type": "debug",
        "z": "33eb1833b0dac91f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 1300,
        "wires": []
    },
    {
        "id": "0b9d0cb65d686547",
        "type": "http response",
        "z": "33eb1833b0dac91f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 390,
        "y": 1340,
        "wires": []
    },
    {
        "id": "4e26b37ad5205f0d",
        "type": "http in",
        "z": "33eb1833b0dac91f",
        "name": "",
        "url": "/management",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1440,
        "wires": [
            [
                "7755abd26730edcf",
                "9eaf190211c0a689"
            ]
        ]
    },
    {
        "id": "7755abd26730edcf",
        "type": "debug",
        "z": "33eb1833b0dac91f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 1440,
        "wires": []
    },
    {
        "id": "9eaf190211c0a689",
        "type": "http response",
        "z": "33eb1833b0dac91f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 390,
        "y": 1480,
        "wires": []
    },
    {
        "id": "28902e5bc6a900a4",
        "type": "exec",
        "z": "33eb1833b0dac91f",
        "command": "history",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 300,
        "y": 1640,
        "wires": [
            [
                "e1976efadab8d2d4"
            ],
            [
                "e1976efadab8d2d4"
            ],
            [
                "e1976efadab8d2d4"
            ]
        ]
    },
    {
        "id": "f2cad982907f08ae",
        "type": "inject",
        "z": "33eb1833b0dac91f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1640,
        "wires": [
            [
                "28902e5bc6a900a4"
            ]
        ]
    },
    {
        "id": "e1976efadab8d2d4",
        "type": "debug",
        "z": "33eb1833b0dac91f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1640,
        "wires": []
    },
    {
        "id": "b5d06306aaaabcd8",
        "type": "rsa-decrypt",
        "z": "33eb1833b0dac91f",
        "name": "rsa decrypt",
        "privatekey": "MIIDDTCCAfWgAwIBAgIJbHrQbJonkMb0MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMTGWRldi04eXM5ZzNmMy51cy5hdXRoMC5jb20wHhcNMjExMTExMTYzMjM4WhcNMzUwNzIxMTYzMjM4WjAkMSIwIAYDVQQDExlkZXYtOHlzOWczZjMudXMuYXV0aDAuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA82kwUMWGeHy3J7x4nGhc/l59n5wRGyuCSfaBAN3lhLzU7FhKDrs81IYuhrvxEZZh4hfQc2QB7pBSNVb6g6hAouJo5N6IVMPgpvwxIlD4ysXX65MEUASEEfgxSBnrYMLr19xQBzXa35Wt4GQZLIL9c7zoIfHAVLzKiQ8Rtanvh1temlUQ2fCaQugq5otlOhlQchEAHm6X3vQpXjvtzddDlkiQ6LGaRBimzOUrDXo7Odfcu+KWLQee8voOFEWfV/VKL04nkoxO0Apv8I98JJy9qJLKjqfmsgV1j0rih7xTA+EPVbnZf7nuUpcU9ep39pPkgdFANlkLdlnzqby4xDCO9wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTgX2NCDpXS8AcDW0GL4yHt8ntUfzAOBgNVHQ8BAf8EBAMCAoQwDQYJKoZIhvcNAQELBQADggEBAG4Wev88dErC7PZIOt3P+9nv1dX3A8uXZrBQ6vt1RiJOW+buUODecit8LWgHfDF6zW1F3KbhsmKzfMwFJQR6UvjEmXPfIt6yOVkGfOAWiOXtKBGBL6GO84CboYjNh8vFfImcfOX4YyyJa7uUvm0dR4JIq2foa1928CP9RzSJRgqiXFqyD61o0moSAHNPnAmSbHJGzYvf1vX4Ls2btJcjYYkfj2aqO9jOzO4uIpzaDOR6qZQeO3qFg5fmLsw8wLoVGjr/ImvSIaQ6FZEzE5/51IVvn1iVUkw7tHr8wmAboz+9IQMpvLmX4alfKfhTdQWG5K2AKGk0mnqc30R0uIm3pCM=",
        "x": 550,
        "y": 860,
        "wires": [
            [
                "33bffc33de65535c"
            ]
        ]
    },
    {
        "id": "43b491128b94f73f",
        "type": "static",
        "z": "33eb1833b0dac91f",
        "name": "",
        "folder": "/home/msb/.well-known",
        "x": 430,
        "y": 540,
        "wires": [
            [
                "790bba4cf4b01937"
            ]
        ]
    },
    {
        "id": "2a8d2c214561c50d",
        "type": "digest",
        "z": "33eb1833b0dac91f",
        "name": "",
        "algorithm": "SHA256",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "423c0e9f31d1a6ba"
            ]
        ]
    },
    {
        "id": "f0e52fa8ee6e80c8",
        "type": "JsonWebToken",
        "z": "33eb1833b0dac91f",
        "name": "JWT",
        "tokenconfig": "b6e20eadbe030e6d",
        "x": 400,
        "y": 280,
        "wires": [
            [
                "c11f5bf0a11c9ca7"
            ]
        ]
    },
    {
        "id": "d966b99977983f3b",
        "type": "JsonWebToken",
        "z": "33eb1833b0dac91f",
        "name": "JWT",
        "tokenconfig": "b6e20eadbe030e6d",
        "x": 570,
        "y": 380,
        "wires": [
            [
                "765b1ede02057584"
            ]
        ]
    },
    {
        "id": "fe36b4aab8e4b51e",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0",
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 20,
        "wires": [
            [
                "02df4cd3db727bea"
            ]
        ]
    },
    {
        "id": "02df4cd3db727bea",
        "type": "function",
        "z": "6b7a48cdf37ecce9",
        "name": "set payload",
        "func": "msg.payload = [{name: 'marina', age: 22, accountid : \"DCE9DB10-482E-404F-B5EC-B1CEDAE10B71\"}];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 20,
        "wires": [
            [
                "fbdbc88728b6bb53"
            ]
        ]
    },
    {
        "id": "ad6bea22c0e0b689",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 20,
        "wires": []
    },
    {
        "id": "8ee269b8753b02a1",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "b3879290c479d05d"
            ]
        ]
    },
    {
        "id": "b3879290c479d05d",
        "type": "function",
        "z": "6b7a48cdf37ecce9",
        "name": "set payload",
        "func": "msg.payload = [[\n    {name: 'chris', age: 22, accountid : \"DCE9DB10-482E-404F-B5EC-B1CEDAE10B71\"},\n    {name: 'markus', age: 22, accountid : \"DCE9DB10-482E-404F-B5EC-B1CEDAE10B71\"}\n]];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 80,
        "wires": [
            [
                "f5c11e1900707b1c"
            ]
        ]
    },
    {
        "id": "7a265f43dea48889",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 80,
        "wires": []
    },
    {
        "id": "5c8f4bef1a115679",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "df0db7fed54ff2ef"
            ]
        ]
    },
    {
        "id": "df0db7fed54ff2ef",
        "type": "function",
        "z": "6b7a48cdf37ecce9",
        "name": "set payload",
        "func": "msg.payload = [{name: 'marina'}, {fields: {name: 1, age: 1}}];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 260,
        "wires": [
            [
                "fb9612f0dabb7e67"
            ]
        ]
    },
    {
        "id": "fc1f0dfb426c9034",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 260,
        "wires": []
    },
    {
        "id": "5b61665e0f5cc0c5",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "91c84ba4d12fb033"
            ]
        ]
    },
    {
        "id": "91c84ba4d12fb033",
        "type": "function",
        "z": "6b7a48cdf37ecce9",
        "name": "set payload",
        "func": "msg.payload = [{age: 22}];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 320,
        "wires": [
            [
                "daa4aeeeb29120ca"
            ]
        ]
    },
    {
        "id": "39ce7da42ba01b32",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 320,
        "wires": []
    },
    {
        "id": "1075d26bfd292f92",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "f83a21e14acc6837"
            ]
        ]
    },
    {
        "id": "f83a21e14acc6837",
        "type": "function",
        "z": "6b7a48cdf37ecce9",
        "name": "set payload",
        "func": "msg.payload = [{age: 22}];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 380,
        "wires": [
            [
                "0d76106c415ab9bc"
            ]
        ]
    },
    {
        "id": "6c446d0d50cd33eb",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 380,
        "wires": []
    },
    {
        "id": "e00d5ecdcb458feb",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "5a7163e6a172dec5"
            ]
        ]
    },
    {
        "id": "5a7163e6a172dec5",
        "type": "function",
        "z": "6b7a48cdf37ecce9",
        "name": "set payload",
        "func": "msg.payload = [{age: 22}];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 440,
        "wires": [
            [
                "eeb034c85f0a357e"
            ]
        ]
    },
    {
        "id": "2f288690a68278bd",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 440,
        "wires": []
    },
    {
        "id": "d5700bd465e13fa5",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "2581ad0e69bb4b74"
            ]
        ]
    },
    {
        "id": "2581ad0e69bb4b74",
        "type": "function",
        "z": "6b7a48cdf37ecce9",
        "name": "set payload",
        "func": "msg.payload = [{}, {$inc: {age: 1}, $set: {aged: true}}];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 200,
        "wires": [
            [
                "ec5005a3a476c75b"
            ]
        ]
    },
    {
        "id": "513e182443df307e",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 200,
        "wires": []
    },
    {
        "id": "1dac7a6a0bc94b9b",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "3fca5aea8063c42f"
            ]
        ]
    },
    {
        "id": "3fca5aea8063c42f",
        "type": "function",
        "z": "6b7a48cdf37ecce9",
        "name": "with doc _id",
        "func": "// query a document id with string, \n// the operation node will handle this\nmsg.payload = [{_id: \"6333409294471deda67da815\"}];\n\n// operation node will substitute, if valid id string\n// msg.payload = [{_id: ObjectId(\"6333409294471deda67da815\")}]\n\n// THIS EXAMPLE WILL ONLY WORK IF YOU HAVE A DOCUMENT WITH THIS ID IN YOUR DATA SET :-)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 500,
        "wires": [
            [
                "0179da6221e5f29c"
            ]
        ]
    },
    {
        "id": "1cc86e86236b50da",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 500,
        "wires": []
    },
    {
        "id": "0f1419fe40a054a4",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "103caed91230c198"
            ]
        ]
    },
    {
        "id": "103caed91230c198",
        "type": "function",
        "z": "6b7a48cdf37ecce9",
        "name": "set payload",
        "func": "msg.payload = [{age: {$gt: 25}}];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 560,
        "wires": [
            [
                "3b5f6cbbc8585516"
            ]
        ]
    },
    {
        "id": "d69cf47b58e754d7",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 560,
        "wires": []
    },
    {
        "id": "d72c3423667d2fe7",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 680,
        "wires": [
            [
                "4fbc5c911d465894"
            ]
        ]
    },
    {
        "id": "53eb06efe65bcfc4",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 680,
        "wires": []
    },
    {
        "id": "4efb71ded2d8a294",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "f345242e576f8361"
            ]
        ]
    },
    {
        "id": "f345242e576f8361",
        "type": "function",
        "z": "6b7a48cdf37ecce9",
        "name": "distinct age",
        "func": "msg.payload = [\"age\"];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 620,
        "wires": [
            [
                "9960080cec50e212"
            ]
        ]
    },
    {
        "id": "df8bfd9233fa703a",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 620,
        "wires": []
    },
    {
        "id": "fbdbc88728b6bb53",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "e2bc7ac9aa77279e",
        "mode": "collection",
        "collection": "persons",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "",
        "x": 480,
        "y": 20,
        "wires": [
            [
                "ad6bea22c0e0b689"
            ]
        ]
    },
    {
        "id": "f5c11e1900707b1c",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "e2bc7ac9aa77279e",
        "mode": "collection",
        "collection": "persons",
        "operation": "insertMany",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "",
        "x": 490,
        "y": 80,
        "wires": [
            [
                "7a265f43dea48889"
            ]
        ]
    },
    {
        "id": "fb9612f0dabb7e67",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "e2bc7ac9aa77279e",
        "mode": "collection",
        "collection": "persons",
        "operation": "findOne",
        "output": "toArray",
        "handleDocId": false,
        "name": "",
        "x": 480,
        "y": 260,
        "wires": [
            [
                "fc1f0dfb426c9034"
            ]
        ]
    },
    {
        "id": "daa4aeeeb29120ca",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "e2bc7ac9aa77279e",
        "mode": "collection",
        "collection": "persons",
        "operation": "find",
        "output": "toArray",
        "handleDocId": false,
        "name": "find.toArray",
        "x": 490,
        "y": 320,
        "wires": [
            [
                "39ce7da42ba01b32"
            ]
        ]
    },
    {
        "id": "0d76106c415ab9bc",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "e2bc7ac9aa77279e",
        "mode": "collection",
        "collection": "persons",
        "operation": "find",
        "output": "forEach",
        "handleDocId": false,
        "name": "find.forEach",
        "x": 490,
        "y": 380,
        "wires": [
            [
                "6c446d0d50cd33eb"
            ]
        ]
    },
    {
        "id": "eeb034c85f0a357e",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "dd0b7f14421d961d",
        "mode": "collection",
        "collection": "persons",
        "operation": "countDocuments",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "countDocuments",
        "x": 510,
        "y": 440,
        "wires": [
            [
                "2f288690a68278bd"
            ]
        ]
    },
    {
        "id": "ec5005a3a476c75b",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "e2bc7ac9aa77279e",
        "mode": "collection",
        "collection": "persons",
        "operation": "updateMany",
        "output": "toArray",
        "handleDocId": false,
        "name": "",
        "x": 490,
        "y": 200,
        "wires": [
            [
                "513e182443df307e"
            ]
        ]
    },
    {
        "id": "0179da6221e5f29c",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "e2bc7ac9aa77279e",
        "mode": "collection",
        "collection": "persons",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": true,
        "name": "findOne",
        "x": 480,
        "y": 500,
        "wires": [
            [
                "1cc86e86236b50da"
            ]
        ]
    },
    {
        "id": "3b5f6cbbc8585516",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "e2bc7ac9aa77279e",
        "mode": "collection",
        "collection": "persons",
        "operation": "deleteMany",
        "output": "toArray",
        "handleDocId": false,
        "name": "",
        "x": 490,
        "y": 560,
        "wires": [
            [
                "d69cf47b58e754d7"
            ]
        ]
    },
    {
        "id": "4fbc5c911d465894",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "e2bc7ac9aa77279e",
        "mode": "db",
        "collection": "",
        "operation": "stats",
        "output": "toArray",
        "handleDocId": false,
        "name": "db stats",
        "x": 480,
        "y": 680,
        "wires": [
            [
                "53eb06efe65bcfc4"
            ]
        ]
    },
    {
        "id": "9960080cec50e212",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "e2bc7ac9aa77279e",
        "mode": "collection",
        "collection": "persons",
        "operation": "distinct",
        "output": "toArray",
        "handleDocId": false,
        "name": "",
        "x": 480,
        "y": 620,
        "wires": [
            [
                "df8bfd9233fa703a"
            ]
        ]
    },
    {
        "id": "1b76d6c08a7518c3",
        "type": "inject",
        "z": "6b7a48cdf37ecce9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "d59a497ef9682081"
            ]
        ]
    },
    {
        "id": "d59a497ef9682081",
        "type": "function",
        "z": "6b7a48cdf37ecce9",
        "name": "set payload",
        "func": "var now = new Date();\nmsg.payload = [\n    {name: 'marina'}, \n    {$set: \n        {name: 'marina', age: 28, aged: false}\n    },\n    {upsert: true}\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 140,
        "wires": [
            [
                "e7cda5a2f5cf33d0"
            ]
        ]
    },
    {
        "id": "e7cda5a2f5cf33d0",
        "type": "mongodb4",
        "z": "6b7a48cdf37ecce9",
        "clientNode": "e2bc7ac9aa77279e",
        "mode": "collection",
        "collection": "persons",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "updateOne",
        "x": 490,
        "y": 140,
        "wires": [
            [
                "798ef25344a97481"
            ]
        ]
    },
    {
        "id": "798ef25344a97481",
        "type": "debug",
        "z": "6b7a48cdf37ecce9",
        "name": "msg.payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 140,
        "wires": []
    }
]